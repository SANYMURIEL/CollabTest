{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\PROJET\\\\frontend\\\\src\\\\components\\\\Sidebar.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport \"./Sidebar.css\"; // Import your CSS file\nimport { AppContext } from \"../context/appContext\"; // Import context\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addNotifications, resetNotifications } from \"../features/userSlice\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sidebar() {\n  _s();\n  const user = useSelector(state => state.user);\n  const {\n    socket,\n    setCurrentRoom,\n    setRooms,\n    rooms,\n    currentRoom\n  } = useContext(AppContext);\n  const dispatch = useDispatch();\n  function joinRoom(room) {\n    if (!user) {\n      return alert(\"Please login\");\n    }\n    socket.emit(\"join-room\", room, currentRoom);\n    setCurrentRoom(room);\n    // dispatch for notifications\n    dispatch(resetNotifications(room));\n  }\n  socket.off(\"notifications\").on(\"notifications\", room => {\n    if (currentRoom !== room) dispatch(addNotifications(room));\n  });\n  useEffect(() => {\n    if (user) {\n      setCurrentRoom(\"HTML/CSS\"); // Set initial room\n      getRooms(); // Fetch room data\n      socket.emit(\"join-room\", \"HTML/CSS\");\n      socket.emit(\"new-user\");\n    }\n  }, [user]); // Run effect only when user changes\n\n  socket.off(\"new-user\").on(\"new-user\", payload => {\n    console.log(payload);\n  });\n  function getRooms() {\n    fetch(\"http://localhost:5001/rooms\").then(res => res.json()).then(data => setRooms(data)); // Update rooms state with fetched data\n  }\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false); // Render nothing if no user\n  }\n\n  // Check if rooms exist before accessing its length or mapping\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"con\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Available Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListGroup, {\n      children: rooms && rooms.length > 0 ? rooms.map((room, idx) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n        active: room === currentRoom,\n        onClick: () => joinRoom(room),\n        children: [room, currentRoom !== room && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"badge rounded-pill bg-primary\",\n          children: user.newMessages[room]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, idx, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading rooms...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) // Display loading message if rooms haven't loaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"gVAfNpaqc92k0q7DxVeQebugNH8=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = Sidebar;\nexport default Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["React","useContext","useEffect","ListGroup","ListGroupItem","AppContext","useSelector","useDispatch","addNotifications","resetNotifications","Fragment","_Fragment","jsxDEV","_jsxDEV","Sidebar","_s","user","state","socket","setCurrentRoom","setRooms","rooms","currentRoom","dispatch","joinRoom","room","alert","emit","off","on","getRooms","payload","console","log","fetch","then","res","json","data","id","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","idx","Item","active","onClick","className","newMessages","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/PROJET/frontend/src/components/Sidebar.js"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\r\nimport \"./Sidebar.css\"; // Import your CSS file\r\nimport { AppContext } from \"../context/appContext\"; // Import context\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport { addNotifications, resetNotifications } from \"../features/userSlice\";\r\nfunction Sidebar() {\r\n  const user = useSelector((state) => state.user);\r\n  const { socket, setCurrentRoom, setRooms, rooms, currentRoom } = useContext(AppContext);\r\n  const dispatch = useDispatch();\r\n  function joinRoom(room) {\r\n    if (!user) {\r\n      return alert(\"Please login\");\r\n    }\r\n    socket.emit(\"join-room\", room, currentRoom);\r\n    setCurrentRoom(room);\r\n    // dispatch for notifications\r\n    dispatch(resetNotifications(room))\r\n\r\n    \r\n  }\r\n\r\nsocket.off(\"notifications\").on(\"notifications\", (room) => {\r\n  if (currentRoom !== room) dispatch(addNotifications(room));\r\n})\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      setCurrentRoom(\"HTML/CSS\"); // Set initial room\r\n      getRooms(); // Fetch room data\r\n      socket.emit(\"join-room\", \"HTML/CSS\");\r\n      socket.emit(\"new-user\");\r\n    }\r\n  }, [user]); // Run effect only when user changes\r\n\r\n  socket.off(\"new-user\").on(\"new-user\", (payload) => {\r\n    console.log(payload);\r\n  });\r\n\r\n  function getRooms() {\r\n    fetch(\"http://localhost:5001/rooms\")\r\n      .then((res) => res.json())\r\n      .then((data) => setRooms(data)); // Update rooms state with fetched data\r\n  }\r\n\r\n  if (!user) {\r\n    return <></>; // Render nothing if no user\r\n  }\r\n\r\n  // Check if rooms exist before accessing its length or mapping\r\n  return (\r\n    <div id=\"con\">\r\n      <br />\r\n      <h2>Available Rooms</h2>\r\n      <ListGroup>\r\n        {rooms && rooms.length > 0 ? (\r\n          rooms.map((room, idx) => (\r\n            <ListGroup.Item\r\n              key={idx}\r\n              active={room === currentRoom}\r\n              onClick={() => joinRoom(room)}\r\n            >\r\n              {room}\r\n              {currentRoom !== room && (\r\n                <span className=\"badge rounded-pill bg-primary\">\r\n                  {user.newMessages[room]}\r\n                </span>\r\n              )}\r\n            </ListGroup.Item>\r\n          ))\r\n        ) : (\r\n          <p>Loading rooms...</p> // Display loading message if rooms haven't loaded\r\n        )}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}